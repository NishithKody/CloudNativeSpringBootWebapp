pods-
get all pods
kubectl get pods
create a pod
kubectl run <podname> --image=<imagename>
get pod details
kubectl describe pod <podname>
delete pod
kubectl delete pod <podname>
edit pod
kubectl edit pod <podname>
If you are not given a pod definition file, you may extract the definition to a file using the below command:
kubectl get pod <pod-name> -o yaml > pod-definition.yaml
create pod from file
kubectl apply -f <filename>
execute a command in a container
kubectl exec <podname> -- <command>
get a specific pod
kubectl get pod <name>

replicaset
get replica sets
kubectl get replicaset
delete replica set
kubectl delete replicaset <name>
create replica set
kubectl create -f <filename>
details of the replicaset
kubectl describe replicaset <name>
update the replicaset
kubectl edit -f <filename>

deployment
'same as replicaset'
scale deployment
kubectl scale deployment <deploymentname> --replicas=4

namespace
to view a particular namespace
kubectl get pods --namespace=dev
all namespace
kubectl get pods --all-namespaces

imperative command tips
--dry-run=client : does not create the resources, tells you whether resource can be created and if your command is right.
-o yaml: This will output the resource definition in YAML format on the screen.

Use the above two in combination along with Linux output redirection to generate a resource definition file quickly, that 
you can then modify and create resources as required, instead of creating the files from scratch.

kubectl run nginx --image=nginx --dry-run=client -o yaml > nginx-pod.yaml

configMap 
It is used to provide key value pairs
kubectl create configmap (imperative)
kubectl create -f (declarative)
kubectl get configmap
kubectl describe configmaps

secret
kubectl create secret generic <name>

security context (under the spec)
used to provide user instead
eg - securityContext:
        runAsUser: 1000

we can add capabilities also (only pod level)
Q - what is the user to execute the sleep process within the ubuntu-sleeper pod
A - kubectl exec ubuntu-sleeper -- whoami

taints and tolerations
kubectl taint node <node-name> key=value:taint-effect
eg- 
kubectl taint node node1 app=blue:NoSchedule
to add tolerations, add this under specs (pod)
tolerations:
- key: "app"
  operation: "Equal"
  value: "blue"
  effect: "NoSchedule"

service accounts
kubectl create serviceaccount <name>
remove taint
kubectl taint node <node-name> key=value:taint-effect-
(note the minus sign at the end)

Node selector
label node-
kubectl label nodes <node-name> <label-key>=<label-value>

Node affinity


service
create a service for a pod (in this way, the selector of the pod are used)
kubectl expose pod redis --name=redis=service --port=6379


check logs
k logs <podname>
check the logs live
k log -f <podname>
if multiple containers
k log -f <podname> <containerName>


